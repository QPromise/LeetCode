"""最短超级串"""
"""执行用时 : 64 ms, 在Find the Shortest Superstring的Python提交中击败了100% 的用户"""
"""
思路：贪心算法，在所有的字符串中每次找到两个公共字符串最长的那俩，然后进行组合
函数设计：
首先是，公共字符串合并函数（返回公共串长度以及合并后的字符串），将两个字符串除去公共部分拼接，尾部查找公共部分进行拼接。
两种可能：1.s1加到s2尾部 2.s2加到s1尾部 用到了s.enswith('x',1,6)函数,从s串的下标为1-6的尾部查找有没有x，有则返回True
其次，控制循环调用公共字符串合并函数比较且列表长度不断减一，循环的过程中需要找到当前最长公共串的两个字符串的下标以及拼接后新字符串，
其中一个A[下标1]替换为拼接后的新串，A[下标2]替换末尾的字符串，循环体结束的条件为列表长度不为1且[s1,s2]找不到公共的字符串为止
"""
class Solution:
    def shortestSuperstring(self, A):
        """
        :type A: List[str]
        :rtype: str
        """
        def commonStringMerge(s1,s2):
            max_len=float('-inf')
            min_len=min(len(s1),len(s2))
            ans=''
            for i in range(1,min_len+1):
                if s1.endswith(s2[:i]):
                    if max_len<i:
                        max_len=i
                        ans=s1+s2[i:]
            for i in range(1,min_len+1):
                if s2.endswith(s1[:i]):
                    if max_len<i:
                        max_len=i
                        ans=s2+s1[i:]
            return max_len,ans
        A_len=len(A)
        while A_len!=1:
            max_len=float('-inf')
            ans=''
            p,q=-1,-1
            for i in range(A_len):
                for j in range(i+1,A_len):
                    temp_len,temp_res=commonStringMerge(A[i],A[j])
                    if max_len<temp_len:
                        max_len=temp_len
                        ans=temp_res
                        p=j
                        q=i
            A_len-=1
            if max_len == float('-inf'):
                A[0]+=A[A_len]
            else:
                A[p]=ans
                A[q]=A[A_len]
        return A[0]
   
